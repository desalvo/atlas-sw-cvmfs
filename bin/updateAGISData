#!/bin/sh

get_etag() {
    TARGET=$1
    [ -s $ETAGCONF ] && ETAG="`grep -i ^${TARGET} ${ETAGCONF} 2> /dev/null | sed 's/\r//g' | awk '{print $2}'`" || unset ETAG
    echo $ETAG
}

download() {
    TARGET="$1"
    SRCURL="$2"
    echo -n "Downloading $TARGET: "
    ETAGOLD="`get_etag $TARGET`"
    ETAGNEW="`install $TARGET "$SRCURL"`"
    rc=$?
    if [ "$ETAGOLD" != "$ETAGNEW" ] ; then
        UPDATED="yes"
        echo "$TARGET: $ETAGNEW" >> ${ETAGCONF}.tmp
        echo "new tag $ETAGNEW"
    else
        echo "$TARGET: $ETAGOLD" >> ${ETAGCONF}.tmp
        echo "tag unchanged"
    fi
    return $rc
}

install() {
    TARGET="$1"
    SRCURL="$2"
    ETAG="`get_etag $TARGET`"
    [ -n "$ETAG" ] && ETAG_OPT="--header 'If-None-Match: $ETAG'" || unset ETAG_OPT
    eval curl -sw "%{http_code}" --connect-timeout 60 -o "${DEST}/${TARGET}" --dump-header $TMPHEADER $ETAG_OPT '$SRCURL' > $TMPRC
    HTTPRC="`cat $TMPRC`" && rm -f $TMPRC
    [ -z "$HTTPRC" ] && HTTPRC=404
    if [ $HTTPRC -eq 200 -o $HTTPRC -eq 304 ] ; then
        rc=0
        [ $HTTPRC -eq 200 ] && ETAG="`grep -i ^etag $TMPHEADER 2>/dev/null | awk '{print $2}'`"
    else
        rc=1
    fi
    echo "$ETAG"
    rm -f $TMPHEADER
    return $rc
}

# Configuration scripts
[ -f "$PWD/.arelinstrc" ] && INSTCONF="$PWD/.arelinstrc"
[ -f "$HOME/.arelinstrc" ] && INSTCONF="$HOME/.arelinstrc"

DEST="/cvmfs/atlas.cern.ch/repo/sw/local/etc"
if [ -s "$INSTCONF" ] ; then
    DEST="`grep -i ^AGISDataPath= $INSTCONF | cut -d= -f 2`"
    CHANGELOG="`grep -i ^ChangeLog= $INSTCONF | cut -d= -f 2`"
    USERNAME="`grep -i ^UserName= $INSTCONF | cut -d= -f 2`"
    AGISURL="`grep -i ^AGISDataURL= $INSTCONF | cut -d= -f 2`"
    TOAURL="`grep -i ^AGISToAURL= $INSTCONF | cut -d= -f 2`"
    SCHEDCONFURL="`grep -i ^AGISSchedconfURL= $INSTCONF | cut -d= -f 2-`"
    DDMEP="`grep -i ^AGISDDMendpointURL= $INSTCONF | cut -d= -f 2-`"
    DDMOS="`grep -i ^AGISDDMobjectstoresURL= $INSTCONF | cut -d= -f 2-`"
    OSSVC="`grep -i ^AGISOSServicesURL= $INSTCONF | cut -d= -f 2-`"
    CVMFSTRANSACTION="`grep -i ^cvmfs_transaction= $INSTCONF | cut -d= -f 2`"
    CVMFSPUBLISH="`grep -i ^cvmfs_publish= $INSTCONF | cut -d= -f 2`"
    CVMFSABORT="`grep -i ^cvmfs_abort= $INSTCONF | cut -d= -f 2`"
    MAILTO="`grep -i ^MailTo= $INSTCONF | cut -d= -f 2`"
fi

TRANSACTION=/tmp/tmp.transaction.$$
CURRDIR="$PWD"
ETAGCONF="$HOME/.agisetags"
TMPHEADER="/tmp/etags.$$"
TMPRC="/tmp/updateagisrc.$$"
TMPDATA="/tmp/updateagisdata.$$"
UPDATED="no"

# Cleanup the temp etags conf file
rm -f ${ETAGCONF}.tmp

# Wait for the main lock
$HOME/bin/lock-install updateAGISData
rc=$?
if [ $rc -ne 0 ]; then
  exit $rc
fi

$CVMFSTRANSACTION
rm -f $TRANSACTION $TMPHEADER
rc=0
[ ! -d $DEST ] && mkdir -p $DEST

# agis_site_info
download agis_site_info.json "$AGISURL"
let currrc=$currrc+$?

# agis_schedconf
download agis_schedconf.json "$SCHEDCONFURL"
let currrc=$currrc+$?

# ToACache
download ToACache.py "$TOAURL"
let currrc=$currrc+$?

# DDMendpoints
download agis_ddmendpoints.json "$DDMEP"
let currrc=$currrc+$?

# DDMendpointsObjectstores
download agis_ddmendpoints_objectstores.json "$DDMOS"
let currrc=$currrc+$?

# OSServices
download agis_os_services.json "$OSSVC"
let currrc=$currrc+$?

# Replace the etags file
mv -f ${ETAGCONF}.tmp ${ETAGCONF}

if [ $currrc -eq 0 -a "$UPDATED" = "yes" ] ; then
    echo "	* + AGISData `date +%Y%m%d%H%M%S`" >> $TRANSACTION
    let rc=$rc+$currrc
fi
cd $CURRDIR

# Automatic Changelog
if [ -n "$CHANGELOG" -a -s "$TRANSACTION" ] ; then
    LOCKFILE=${CHANGELOG}.lock
    set -o noclobber
    echo "Locking the ChangeLog file"
    lock_retries=0
    max_lock_retries=360
    lock_retry_sleep=10
    while [ $lock_retries -lt $max_lock_retries ] ; do
        echo "ChangeLog lock" 2> /dev/null > ${LOCKFILE}
        lsr=$?
        if [ $lsr -ne 0 ] ; then
            echo "Cannot lock the ChangeLog file, waiting ${lock_retry_sleep}s"
            let lock_retries=$lock_retries+1
            sleep ${lock_retry_sleep}s
        else
            break
        fi
    done
    set +o noclobber
    if [ $lsr -ne 0 ] ; then
        echo "Cannot lock the tags file after $lock_retries retries"
    else
        if [ -f ${CHANGELOG} ] ; then
            mv ${CHANGELOG} ${CHANGELOG}.save
        else
            touch ${CHANGELOG}.save
        fi
        [ -s ${CHANGELOG}.save ] && echo >> $TRANSACTION
        echo "`date +'%Y-%m-%d %H:%M:%S'` $USERNAME" > ${CHANGELOG}.head
        cat ${CHANGELOG}.head $TRANSACTION ${CHANGELOG}.save > ${CHANGELOG}
        if [ $? -eq 0 ] ; then
            rm -f ${CHANGELOG}.head ${CHANGELOG}.save
            echo "Updating ChangeLog $CHANGELOG successful"
        else
            echo "Error writing the ChangeLog, restoring the old copy"
            rm -f ${CHANGELOG}
            mv ${CHANGELOG}.save ${CHANGELOG}
        fi
        echo "Unlocking the ChangeLog file"
        rm -f ${LOCKFILE}
    fi
fi

# Publish changes
if [ $rc -eq 0 ] ; then
    if [ -n "$CVMFSPUBLISH" -a -s $TRANSACTION ] ; then
        $CVMFSPUBLISH
        if [ -n "$MAILTO" ] ; then
            mail -s "[ATLAS CVMFS UPDATE] `hostname`" "$MAILTO" <<EOD
Dear admin,
the following releases have been installed in CVMFS @ `hostname`
  
`cat $TRANSACTION`
  
Regards,
    
     Your faithful installation agent
EOD
        fi
    else
        [ -n "$CVMFSABORT" ] && $CVMFSABORT
    fi
    # Clear the install lock
    $HOME/bin/unlock-install
else
    if [ -n "$MAILTO" ] ; then
        mail -s "[ATLAS CVMFS ERROR] `hostname`" "$MAILTO" <<EOD
Dear admin,
an updateAGISData job failed to run on `hostname`
Regards,
    
     Your faithful installation agent
EOD
    fi
fi

# Cleanup
rm -f $TRANSACTION

exit $rc
