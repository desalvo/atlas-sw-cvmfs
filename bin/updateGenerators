#!/bin/sh

[ -z "$1" ] && USERNAME="atlcvmfs"

# Configuration scripts
[ -f "$PWD/.arelinstrc" ] && INSTCONF="$PWD/.arelinstrc"
[ -f "$HOME/.arelinstrc" ] && INSTCONF="$HOME/.arelinstrc"

DEST="/cvmfs/atlas.cern.ch/repo/sw/Generators"
PDFDIR="lhapdfsets/current"
MADGRAPHMODELSDIR="madgraph/models"
if [ -s "$INSTCONF" ] ; then
    DEST="`grep -i ^GeneratorsPath= $INSTCONF | cut -d= -f 2`"
    CHANGELOG="`grep -i ^ChangeLog= $INSTCONF | cut -d= -f 2`"
    USERNAME="`grep -i ^UserName= $INSTCONF | cut -d= -f 2`"
    SVNUSERNAME="`grep -i ^SvnUserName= $INSTCONF | cut -d= -f 2`"
    JOLIST="`grep -i ^GeneratorsJobOptions= $INSTCONF | cut -d= -f 2`"
    PDFSETS="`grep -i ^GeneratorsPDFSets= $INSTCONF | cut -d= -f 2`"
    CVMFSTRANSACTION="`grep -i ^cvmfs_transaction= $INSTCONF | cut -d= -f 2`"
    CVMFSABORT="`grep -i ^cvmfs_abort= $INSTCONF | cut -d= -f 2`"
    CVMFSPUBLISH="`grep -i ^cvmfs_publish= $INSTCONF | cut -d= -f 2`"
    MAILTO="`grep -i ^MailTo= $INSTCONF | cut -d= -f 2`"
fi

TRANSACTION=/tmp/tmp.transaction.$$
TMPTAGS=/tmp/tmp.tags.$$
CURRDIR="$PWD"

# Wait for the main lock
$HOME/bin/lock-install updateGenerators
rc=$?
if [ $rc -ne 0 ]; then
  exit $rc
fi

$CVMFSTRANSACTION
rm -f $TRANSACTION
rc=0
for JO in $JOLIST; do
    [ ! -d $DEST/$JO ] && mkdir -p $DEST/$JO/latest
    [ ! -f $DEST/$JO/.cvmfscatalog ] && touch $DEST/$JO/.cvmfscatalog
    timeout 60s svn ls svn+ssh://$SVNUSERNAME@svn.cern.ch/reps/atlasoff/Generators/$JO/tags > $TMPTAGS
    if [ $? -eq 0 ] ; then
        latesttag="`cat $TMPTAGS | tail -n 1`"
    else
        unset latesttag
    fi
    rm -f $TMPTAGS
    if [ -n "$latesttag" ] ; then
        if [ ! -f $DEST/$JO/tag ] ; then
            echo "Checking out Generators $latesttag into $DEST/$JO/latest"
            svn co svn+ssh://$SVNUSERNAME@svn.cern.ch/reps/atlasoff/Generators/$JO/tags/$latesttag $DEST/$JO/latest
            currrc=$?
            if [ $currrc -eq 0 ] ; then
                echo $latesttag > $DEST/$JO/tag
                echo "	* + Generators $latesttag" >> $TRANSACTION
                let rc=$rc+$currrc
            fi
        else
            if [ "`cat $DEST/$JO/tag`" != "$latesttag" ] ; then
                cd $DEST/$JO/latest
                echo "Updating Generators from `cat $DEST/$JO/tag` to $latesttag in $DEST/$JO/latest"
                svn switch svn+ssh://$SVNUSERNAME@svn.cern.ch/reps/atlasoff/Generators/$JO/tags/$latesttag
                currrc=$?
                if [ $currrc -eq 0 ] ; then
                    echo $latesttag > $DEST/$JO/tag
                    echo "	* + Generators $latesttag" >> $TRANSACTION
                    let rc=$rc+$currrc
                fi
            fi
        fi
        BADDIRS="`\ls -d $DEST/$JO/latest/*-??-??-?? 2>/dev/null | wc -l`"
        if [ $BADDIRS -gt 0 ] ; then
            eval $CVMFSABORT
            if [ -n "$MAILTO" ] ; then
                mail -s "[ATLAS CVMFS ERROR] `hostname`" "$MAILTO" <<EOD
Dear admin,
the following releases failed to install in CVMFS @ `hostname` due to a bad checkout

`cat $TRANSACTION`

Regards,

     Your faithful installation agent
EOD
            fi
            rm -f $TRANSACTION
            # Clear the install lock
            $HOME/bin/unlock-install
            exit 100
        fi
    fi
done

# MadGraphModels
#[ ! -d $DEST/$MADGRAPHMODELSDIR ] && mkdir -p $DEST/$MADGRAPHMODELSDIR/latest
#[ ! -f $DEST/$MADGRAPHMODELSDIR/.cvmfscatalog ] && touch $DEST/$MADGRAPHMODELSDIR/.cvmfscatalog
#timeout 60s svn ls svn+ssh://$SVNUSERNAME@svn.cern.ch/reps/atlasoff/Generators/MadGraphModels/tags > $TMPTAGS
#if [ $? -eq 0 ] ; then
#    latesttag="`cat $TMPTAGS | tail -n 1`"
#else
#    unset latesttag
#fi
#rm -f $TMPTAGS
#if [ -n "$latesttag" ] ; then
#    if [ ! -f $DEST/$MADGRAPHMODELSDIR/tag ] ; then
#        echo "Checking out MadGraphModels $latesttag into $DEST/$MADGRAPHMODELSDIR/latest"
#        svn co svn+ssh://$SVNUSERNAME@svn.cern.ch/reps/atlasoff/Generators/MadGraphModels/tags/$latesttag $DEST/$MADGRAPHMODELSDIR/latest
#        currrc=$?
#        if [ $currrc -eq 0 ] ; then
#            echo $latesttag > $DEST/$MADGRAPHMODELSDIR/tag
#            echo "	* + MadGraphModels $latesttag" > ${TRANSACTION}.latest
#            cat ${TRANSACTION}.latest >> $TRANSACTION
#            let rc=$rc+$currrc
#        fi
#    else
#        if [ "`cat $DEST/$MADGRAPHMODELSDIR/tag`" != "$latesttag" ] ; then
#            cd $DEST/$MADGRAPHMODELSDIR/latest
#            echo "Updating MadGraphModels from `cat $DEST/$MADGRAPHMODELSDIR/tag` to $latesttag in $DEST/$MADGRAPHMODELSDIR/latest"
#            svn switch svn+ssh://$SVNUSERNAME@svn.cern.ch/reps/atlasoff/Generators/MadGraphModels/tags/$latesttag
#            currrc=$?
#            if [ $currrc -eq 0 ] ; then
#                echo $latesttag > $DEST/$MADGRAPHMODELSDIR/tag
#                echo "	* + MadGraphModels $latesttag" > ${TRANSACTION}.latest
#                cat ${TRANSACTION}.latest >> $TRANSACTION
#                let rc=$rc+$currrc
#            fi
#        fi
#    fi
#    BADDIRS="`\ls -d $DEST/$MADGRAPHMODELSDIR/latest/*-??-??-?? 2>/dev/null | wc -l`"
#    if [ $BADDIRS -gt 0 ] ; then
#        eval $CVMFSABORT
#        if [ -n "$MAILTO" ] ; then
#            mail -s "[ATLAS CVMFS ERROR] `hostname`" "$MAILTO" <<EOD
#Dear admin,
#the following releases failed to install in CVMFS @ `hostname` due to a bad checkout
#
#`cat ${TRANSACTION}.latest`
#
#Regards,
#
#     Your faithful installation agent
#EOD
#        fi
#        rm -f ${TRANSACTION}*
#        # Clear the install lock
#        $HOME/bin/unlock-install
#        exit 100
#    fi
#fi

currrc=0
kinit -kt ${SVNUSERNAME}.keytab ${SVNUSERNAME}@CERN.CH
MGSRC="https://:@gitlab.cern.ch:8443/atlas-generators-team/MadGraphModels.git"
MGDST="$DEST/$MADGRAPHMODELSDIR/latest"
echo "Syncing MadGraphModels from $MGSRC to $MGDST"
if [ ! -d `dirname $MGDST` ] ; then
    mkdir -p `dirname $MGDST`
    git clone $MGSRC $MGDST
    currrc=$?
    [ $currrc -eq 0 ] && touch ${MGDST}/.cvmfscatalog
else
    cd $MGDST
    git fetch
    HEADREV=$(git rev-parse HEAD)
    LOCALREV=$(git rev-parse @{u})
    if [ $HEADREV != $LOCALREV ]; then
        git pull
        currrc=$?
    else
        currrc=10
    fi
fi
if [ $currrc -eq 0 ] ; then
    TSTAMP="`date +%Y%m%d%H%M`"
    echo "	* + MadGraphModels $TSTAMP" >> $TRANSACTION
fi
let rc=$rc+$currrc

# PDFSets
# For this to work, since the synchronization is performed without afs tokens,
# the source area should be world readable

[ ! -d $DEST/$PDFDIR ] && mkdir -p $DEST/$PDFDIR
[ ! -f $DEST/$PDFDIR/.cvmfscatalog ] && touch $DEST/$PDFDIR/.cvmfscatalog
rsync -nirl -e "ssh -l ${SVNUSERNAME} -i $HOME/.ssh/${SVNUSERNAME}_id_dsa" $PDFSETS/ $DEST/$PDFDIR | egrep -v '^sending|^sent|^total|^$' | egrep '^>|^c' | awk '{print $2}' | tee ${TRANSACTION}.flist
if [ `cat ${TRANSACTION}.flist | wc -l` -gt 0 ] ; then
    echo "Synchronizing `cat ${TRANSACTION}.flist | wc -l` files"
    rsync -dlptgov --delete --files-from=${TRANSACTION}.flist -e "ssh -l ${SVNUSERNAME} -i $HOME/.ssh/${SVNUSERNAME}_id_dsa" $PDFSETS/ $DEST/$PDFDIR 2> ${TRANSACTION}.err
    rc=$?
    if [ $rc -eq 0 -a -s "${TRANSACTION}.flist" ] ; then
        TSTAMP="`date +%Y%m%d%H%M`"
        echo "  * + GroupData $TSTAMP" >> $TRANSACTION
    else
        cat ${TRANSACTION}.err
    fi
else
    echo "No PDFSets files to synchronize"
fi
rm -f ${TRANSACTION}.*


cd $CURRDIR

# Automatic Changelog
if [ -n "$CHANGELOG" -a -s "$TRANSACTION" ] ; then
    LOCKFILE=${CHANGELOG}.lock
    set -o noclobber
    echo "Locking the ChangeLog file"
    lock_retries=0
    max_lock_retries=360
    lock_retry_sleep=10
    while [ $lock_retries -lt $max_lock_retries ] ; do
        echo "ChangeLog lock" 2> /dev/null > ${LOCKFILE}
        lsr=$?
        if [ $lsr -ne 0 ] ; then
            echo "Cannot lock the ChangeLog file, waiting ${lock_retry_sleep}s"
            let lock_retries=$lock_retries+1
            sleep ${lock_retry_sleep}s
        else
            break
        fi
    done
    set +o noclobber
    if [ $lsr -ne 0 ] ; then
        echo "Cannot lock the tags file after $lock_retries retries"
    else
        if [ -f ${CHANGELOG} ] ; then
            mv ${CHANGELOG} ${CHANGELOG}.save
        else
            touch ${CHANGELOG}.save
        fi
        [ -s ${CHANGELOG}.save ] && echo >> $TRANSACTION
        echo "`date +'%Y-%m-%d %H:%M:%S'` $USERNAME" > ${CHANGELOG}.head
        cat ${CHANGELOG}.head $TRANSACTION ${CHANGELOG}.save > ${CHANGELOG}
        if [ $? -eq 0 ] ; then
            rm -f ${CHANGELOG}.head ${CHANGELOG}.save
            echo "Updating ChangeLog $CHANGELOG successful"
        else
            echo "Error writing the ChangeLog, restoring the old copy"
            rm -f ${CHANGELOG}
            mv ${CHANGELOG}.save ${CHANGELOG}
        fi
        echo "Unlocking the ChangeLog file"
        rm -f ${LOCKFILE}
    fi
fi

# Publish changes
if [ $rc -eq 0 ] ; then
    if [ -n "$CVMFSPUBLISH" -a -s $TRANSACTION ] ; then
        $CVMFSPUBLISH
        if [ -n "$MAILTO" ] ; then
            mail -s "[ATLAS CVMFS UPDATE] `hostname`" "$MAILTO" <<EOD
Dear admin,
the following releases have been installed in CVMFS @ `hostname`

`cat $TRANSACTION`

Regards,

     Your faithful installation agent
EOD
        fi
    else
        [ -n "$CVMFSABORT" ] && $CVMFSABORT
    fi
    # Clear the install lock
    $HOME/bin/unlock-install
fi

# Cleanup
rm -f $TRANSACTION

exit $rc
