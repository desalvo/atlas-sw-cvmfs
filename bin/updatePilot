#!/bin/sh

[ -z "$1" ] && USERNAME="atlcvmfs"

# Configuration scripts
[ -f "$PWD/.arelinstrc" ] && INSTCONF="$PWD/.arelinstrc"
[ -f "$HOME/.arelinstrc" ] && INSTCONF="$HOME/.arelinstrc"

DEST="/cvmfs/atlas.cern.ch/repo/sw/PandaPilot"
if [ -s "$INSTCONF" ] ; then
    PPPATHS="`grep -i ^PandaPilotPath= $INSTCONF | cut -d= -f 2`"
    CHANGELOG="`grep -i ^ChangeLog= $INSTCONF | cut -d= -f 2`"
    USERNAME="`grep -i ^UserName= $INSTCONF | cut -d= -f 2`"
    SVNUSERNAME="`grep -i ^SvnUserName= $INSTCONF | cut -d= -f 2`"
    PILOTARCHIVE="`grep -i ^PandaPilotArchive= $INSTCONF | cut -d= -f 2`"
    CVMFSTRANSACTION="`grep -i ^cvmfs_transaction= $INSTCONF | cut -d= -f 2`"
    CVMFSABORT="`grep -i ^cvmfs_abort= $INSTCONF | cut -d= -f 2`"
    CVMFSPUBLISH="`grep -i ^cvmfs_publish= $INSTCONF | cut -d= -f 2`"
fi

TRANSACTION=/tmp/tmp.transaction.$$
CURRDIR="$PWD"

# Wait for the main lock
$HOME/bin/lock-install updatePilot
rc=$?
if [ $rc -ne 0 ]; then
  exit $rc
fi

$CVMFSTRANSACTION
rm -f $TRANSACTION
rc=0
for PPPATH in `echo $PPPATHS | sed 's/,/ /g'`; do
    PPSRC="`echo $PPPATH | cut -d: -f 1`"
    DEST="`echo $PPPATH | cut -d: -f 2`"
    PILOTPKG="`basename $PPSRC`"
    [ ! -d $DEST/$PILOTPKG ] && mkdir -p $DEST/$PILOTPKG/latest
    [ ! -f $DEST/$PILOTPKG/.cvmfscatalog ] && touch $DEST/$PILOTPKG/.cvmfscatalog
    if [ ! -f $DEST/$PILOTPKG/latest/PILOTVERSION ] ; then
        echo "Checking out the latest Panda $PILOTPKG into $DEST/$PILOTPKG/latest"
        git clone https://github.com/$PPSRC $DEST/$PILOTPKG/latest
        currrc=$?
        if [ $currrc -eq 0 ] ; then
            if [ ! -d $DEST/$PILOTARCHIVE ] ; then
                mkdir $DEST/$PILOTARCHIVE
                touch $DEST/.cvmfscatalog
            fi
            PILOTARCHIVE_PKG=$DEST/$PILOTARCHIVE/${PILOTPKG}-`cat $DEST/$PILOTPKG/latest/PILOTVERSION | sed 's/ /-/g'`.tar.gz
            if [ "$PILOTPKG" == "pilot" ] ; then
                PILOTARCHIVE_LATEST=$DEST/$PILOTARCHIVE/pilotcode-`cat $DEST/$PILOTPKG/latest/PILOTVERSION | awk '{print $1}'`.tar.gz
                echo "PILOTARCHIVE_PKG=$PILOTARCHIVE_PKG"
                echo "PILOTARCHIVE_LATEST=$PILOTARCHIVE_LATEST"
                cd $DEST/$PILOTPKG/latest
                tar cfz $PILOTARCHIVE_PKG *
                cd -
            else
                PILOTARCHIVE_LATEST=$DEST/$PILOTARCHIVE/${PILOTPKG}.tar.gz
                echo "PILOTARCHIVE_PKG=$PILOTARCHIVE_PKG"
                echo "PILOTARCHIVE_LATEST=$PILOTARCHIVE_LATEST"
                cd $DEST/$PILOTPKG
                cp -a latest $PILOTPKG
                tar cfz $PILOTARCHIVE_PKG --exclude=.git --exclude=doc --exclude=.idea --exclude=docs $PILOTPKG
                rm -fr $PILOTPKG
                cd -
            fi
            # Switch the link to the latest package
            #if [ $? -eq 0 -a -s $PILOTARCHIVE_PKG ] ; then
            #    [ -L $PILOTARCHIVE_LATEST ] && rm -f $PILOTARCHIVE_LATEST
            #    ln -s  `basename $PILOTARCHIVE_PKG` $PILOTARCHIVE_LATEST
            #fi
            cp -f $DEST/$PILOTPKG/latest/PILOTVERSION $DEST/$PILOTPKG/tag
            PILOTVERSION="`cat $DEST/$PILOTPKG/latest/PILOTVERSION | awk '{print $NF}'`"
            [ ! -d "$DEST/$PILOTPKG/$PILOTVERSION" ] && cp -a $DEST/$PILOTPKG/latest $DEST/$PILOTPKG/$PILOTVERSION
            echo "	* + PandaPilot `cat $DEST/$PILOTPKG/latest/PILOTVERSION`" >> $TRANSACTION
            let rc=$rc+$currrc
        fi
    else
        cd $DEST/$PILOTPKG/latest
        echo "Updating PandaPilot in $DEST/$PILOTPKG/latest"
        git pull
        currrc=$?
        if [ $currrc -eq 0 ] ; then
            if [ "`cat $DEST/$PILOTPKG/latest/PILOTVERSION`" != "`cat $DEST/$PILOTPKG/tag`" ] ; then
                if [ ! -d $DEST/$PILOTARCHIVE ] ; then
                    mkdir $DEST/$PILOTARCHIVE
                    touch $DEST/.cvmfscatalog
                fi
                PILOTARCHIVE_PKG=$DEST/$PILOTARCHIVE/${PILOTPKG}-`cat $DEST/$PILOTPKG/latest/PILOTVERSION | sed 's/ /-/g'`.tar.gz
                if [ "$PILOTPKG" == "pilot" ] ; then
                    PILOTARCHIVE_LATEST=$DEST/$PILOTARCHIVE/pilotcode-`cat $DEST/$PILOTPKG/latest/PILOTVERSION | awk '{print $1}'`.tar.gz
                    echo "PILOTARCHIVE_PKG=$PILOTARCHIVE_PKG"
                    echo "PILOTARCHIVE_LATEST=$PILOTARCHIVE_LATEST"
                    cd $DEST/$PILOTPKG/latest
                    tar cfz $PILOTARCHIVE_PKG *
                    cd -
                else
                    PILOTARCHIVE_LATEST=$DEST/$PILOTARCHIVE/${PILOTPKG}.tar.gz
                    echo "PILOTARCHIVE_PKG=$PILOTARCHIVE_PKG"
                    echo "PILOTARCHIVE_LATEST=$PILOTARCHIVE_LATEST"
                    cd $DEST/$PILOTPKG
                    cp -a latest $PILOTPKG
                    tar cfz $PILOTARCHIVE_PKG --exclude=.git --exclude=doc --exclude=.idea --exclude=docs $PILOTPKG
                    rm -fr $PILOTPKG
                    cd -
                fi
                # Switch the link to the latest package
                #if [ $? -eq 0 -a -s $PILOTARCHIVE_PKG ] ; then
                #    [ -L $PILOTARCHIVE_LATEST ] && rm -f $PILOTARCHIVE_LATEST
                #    ln -s  `basename $PILOTARCHIVE_PKG` $PILOTARCHIVE_LATEST
                #fi
                cp -f $DEST/$PILOTPKG/latest/PILOTVERSION $DEST/$PILOTPKG/tag
                PILOTVERSION="`cat $DEST/$PILOTPKG/latest/PILOTVERSION | awk '{print $NF}'`"
                [ ! -d "$DEST/$PILOTPKG/$PILOTVERSION" ] && cp -a $DEST/$PILOTPKG/latest $DEST/$PILOTPKG/$PILOTVERSION
                echo "	* + PandaPilot `cat $DEST/$PILOTPKG/latest/PILOTVERSION`" >> $TRANSACTION
                let rc=$rc+$currrc
            fi
        fi
    fi
    if [ "$PILOTPKG" == "pilot3" ] ; then
        PILOTARCHIVE_LATEST=$DEST/$PILOTARCHIVE/${PILOTPKG}.tar.gz
        echo "$PILOTARCHIVE_LATEST currently points to `readlink $PILOTARCHIVE_LATEST`"
        PILOTARCHIVE_LATEST_NEW="$DEST/$PILOTARCHIVE/${PILOTPKG}-`curl -s http://pandaserver.cern.ch:25085/cache/schedconfig/ALL.all.json 2>/dev/null | jq .params.pilot_version | sed 's/\"//g'`.tar.gz"
        if [ -s $PILOTARCHIVE_LATEST_NEW ] ; then
            if [ "`readlink $PILOTARCHIVE_LATEST`" != "`basename $PILOTARCHIVE_LATEST_NEW`" ] ; then
                echo "Switching $PILOTARCHIVE_LATEST to `basename $PILOTARCHIVE_LATEST_NEW`"
                rm -f $PILOTARCHIVE_LATEST
                ln -s  `basename $PILOTARCHIVE_LATEST_NEW` $PILOTARCHIVE_LATEST
                echo "	* + PandaPilot linked to `basename $PILOTARCHIVE_LATEST_NEW`" >> $TRANSACTION
            else
                echo "$PILOTARCHIVE_LATEST already pointing to the latest version `basename $PILOTARCHIVE_LATEST_NEW`"
            fi
        else
            echo "No package ${PILOTARCHIVE_LATEST_NEW}, please check the Panda Schedconfig parameters"
        fi
    fi
done
cd $CURRDIR

# Automatic Changelog
if [ -n "$CHANGELOG" -a -s "$TRANSACTION" ] ; then
    LOCKFILE=${CHANGELOG}.lock
    set -o noclobber
    echo "Locking the ChangeLog file"
    lock_retries=0
    max_lock_retries=360
    lock_retry_sleep=10
    while [ $lock_retries -lt $max_lock_retries ] ; do
        echo "ChangeLog lock" 2> /dev/null > ${LOCKFILE}
        lsr=$?
        if [ $lsr -ne 0 ] ; then
            echo "Cannot lock the ChangeLog file, waiting ${lock_retry_sleep}s"
            let lock_retries=$lock_retries+1
            sleep ${lock_retry_sleep}s
        else
            break
        fi
    done
    set +o noclobber
    if [ $lsr -ne 0 ] ; then
        echo "Cannot lock the tags file after $lock_retries retries"
    else
        if [ -f ${CHANGELOG} ] ; then
            mv ${CHANGELOG} ${CHANGELOG}.save
        else
            touch ${CHANGELOG}.save
        fi
        [ -s ${CHANGELOG}.save ] && echo >> $TRANSACTION
        echo "`date +'%Y-%m-%d %H:%M:%S'` $USERNAME" > ${CHANGELOG}.head
        cat ${CHANGELOG}.head $TRANSACTION ${CHANGELOG}.save > ${CHANGELOG}
        if [ $? -eq 0 ] ; then
            rm -f ${CHANGELOG}.head ${CHANGELOG}.save
            echo "Updating ChangeLog $CHANGELOG successful"
        else
            echo "Error writing the ChangeLog, restoring the old copy"
            rm -f ${CHANGELOG}
            mv ${CHANGELOG}.save ${CHANGELOG}
        fi
        echo "Unlocking the ChangeLog file"
        rm -f ${LOCKFILE}
    fi
fi

# Publish changes
if [ $rc -eq 0 ] ; then
    if [ -n "$CVMFSPUBLISH" -a -s $TRANSACTION ] ; then
        $CVMFSPUBLISH
    else
        [ -n "$CVMFSABORT" ] && $CVMFSABORT
    fi
    # Clear the install lock
    $HOME/bin/unlock-install
fi

# Cleanup
rm -f $TRANSACTION

exit $rc
