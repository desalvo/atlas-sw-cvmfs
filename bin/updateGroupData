#!/bin/sh

[ -z "$1" ] && USERNAME="atlcvmfs"

# Configuration scripts
[ -f "$PWD/.arelinstrc" ] && INSTCONF="$PWD/.arelinstrc"
[ -f "$HOME/.arelinstrc" ] && INSTCONF="$HOME/.arelinstrc"
GDEXCLLIST="$HOME/.groupdata.exclude"
[ ! -f "$GDEXCLLIST" ] && touch $GDEXCLLIST

if [ -s "$INSTCONF" ] ; then
    GDPATHS="`grep -i ^GroupDataPath= $INSTCONF | cut -d= -f 2`"
    CHANGELOG="`grep -i ^ChangeLog= $INSTCONF | cut -d= -f 2`"
    USERNAME="`grep -i ^UserName= $INSTCONF | cut -d= -f 2`"
    SVNUSERNAME="`grep -i ^SvnUserName= $INSTCONF | cut -d= -f 2`"
    CVMFSTRANSACTION="`grep -i ^cvmfs_transaction= $INSTCONF | cut -d= -f 2`"
    CVMFSABORT="`grep -i ^cvmfs_abort= $INSTCONF | cut -d= -f 2`"
    CVMFSPUBLISH="`grep -i ^cvmfs_publish= $INSTCONF | cut -d= -f 2`"
    MAILTO="`grep -i ^MailTo= $INSTCONF | cut -d= -f 2 | tr ',' ' '`"
    MAILTOGD="`grep -i ^MailToGroupData= $INSTCONF | cut -d= -f 2 | tr ',' ' '`"
    [ -n "$MAILTOGD" ] && MAILTOALARM="${MAILTO},${MAILTOGD}" || MAILTOALARM="${MAILTO}"
fi

TRANSACTION=/tmp/tmp.transaction.$$
CURRDIR="$PWD"
[ -z "$MAXFILES" ] && MAXFILES=100000

rm -f ${TRANSACTION}*
rc=0
# Wait for the main lock
if [ ! -f $TRANSACTION ] ; then
    $HOME/bin/lock-install updateGroupData
    rc=$?
else
    rc=0
fi
if [ $rc -ne 0 ]; then
    exit $rc
fi

# Start the transactions
echo "Preparing transfer"
kinit -kt ${SVNUSERNAME}.keytab ${SVNUSERNAME}@CERN.CH
[ -z "$GDPATHS" ] && GDPATHS="/afs/cern.ch/atlas/www/GROUPS/DATABASE/GroupData/:/cvmfs/atlas.cern.ch/repo/sw/database/GroupData"
GDPINDX=0
for GDPATH in `echo $GDPATHS | sed 's/,/ /g'`; do
  GDSRC="lxplus.cern.ch:`echo $GDPATH | cut -d: -f 1`"
  GDDST="`echo $GDPATH | cut -d: -f 2`"
  let GDPINDX=$GDPINDX+1
  echo "Syncing GroupData [$GDPINDX] from $GDSRC to $GDDST"
  rsync -nirl -e "ssh -l ${SVNUSERNAME} -i $HOME/.ssh/${SVNUSERNAME}_id_dsa -o GSSAPIDelegateCredentials=yes -o GSSAPIAuthentication=yes -o StrictHostKeyChecking=no" $GDSRC $GDDST | \
     egrep -v '^sending|^sent|^total|^cannot|^could not|^$' | egrep '^>|^c' | awk '{print $2}' | head -n $MAXFILES | grep -v -f ${GDEXCLLIST} | tee ${TRANSACTION}.${GDPINDX}.flist
  [ -n "$DEBUG" ] && cat ${TRANSACTION}.${GDPINDX}.flist
  if [ `cat ${TRANSACTION}.${GDPINDX}.flist | wc -l` -gt 0 ] ; then
      [ ! -f $TRANSACTION ] && eval $CVMFSTRANSACTION
      echo "Synchronizing `cat ${TRANSACTION}.${GDPINDX}.flist | wc -l` files"
      #rsync -dlptgov --delete --files-from=${TRANSACTION}.${GDPINDX}.flist -e "ssh -l ${SVNUSERNAME} -i $HOME/.ssh/${SVNUSERNAME}_id_dsa -o GSSAPIDelegateCredentials=yes -o GSSAPIAuthentication=yes -o StrictHostKeyChecking=no" $GDSRC $GDDST 2> ${TRANSACTION}.${GDPINDX}.err
      rsync -dlptgov --files-from=${TRANSACTION}.${GDPINDX}.flist -e "ssh -l ${SVNUSERNAME} -i $HOME/.ssh/${SVNUSERNAME}_id_dsa -o GSSAPIDelegateCredentials=yes -o GSSAPIAuthentication=yes -o StrictHostKeyChecking=no" $GDSRC $GDDST 2> ${TRANSACTION}.${GDPINDX}.err
      rc=$?
      if [ $rc -eq 0 -a -s "${TRANSACTION}.${GDPINDX}.flist" ] ; then
          TSTAMP="`date +%Y%m%d%H%M`"
          echo "	* + GroupData $GDSRC $TSTAMP" >> $TRANSACTION
      else
          cat ${TRANSACTION}.${GDPINDX}.flist
          cat ${TRANSACTION}.${GDPINDX}.err
      fi
  else
      echo "No files to synchronize from $GDSRC to $GDDST"
      rm -f ${TRANSACTION}.${GDPINDX}.flist
  fi
done

cd $CURRDIR

# Automatic Changelog
if [ -n "$CHANGELOG" -a -s "$TRANSACTION" ] ; then
    LOCKFILE=${CHANGELOG}.lock
    set -o noclobber
    echo "Locking the ChangeLog file"
    lock_retries=0
    max_lock_retries=360
    lock_retry_sleep=10
    while [ $lock_retries -lt $max_lock_retries ] ; do
        echo "ChangeLog lock" 2> /dev/null > ${LOCKFILE}
        lsr=$?
        if [ $lsr -ne 0 ] ; then
            echo "Cannot lock the ChangeLog file, waiting ${lock_retry_sleep}s"
            let lock_retries=$lock_retries+1
            sleep ${lock_retry_sleep}s
        else
            break
        fi
    done
    set +o noclobber
    if [ $lsr -ne 0 ] ; then
        echo "Cannot lock the tags file after $lock_retries retries"
    else
        if [ -f ${CHANGELOG} ] ; then
            mv ${CHANGELOG} ${CHANGELOG}.save
        else
            touch ${CHANGELOG}.save
        fi
        [ -s ${CHANGELOG}.save ] && echo >> $TRANSACTION
        echo "`date +'%Y-%m-%d %H:%M:%S'` $USERNAME" > ${CHANGELOG}.head
        cat ${CHANGELOG}.head $TRANSACTION ${CHANGELOG}.save > ${CHANGELOG}
        if [ $? -eq 0 ] ; then
            rm -f ${CHANGELOG}.head ${CHANGELOG}.save
            echo "Updating ChangeLog $CHANGELOG successful"
        else
            echo "Error writing the ChangeLog, restoring the old copy"
            rm -f ${CHANGELOG}
            mv ${CHANGELOG}.save ${CHANGELOG}
        fi
        echo "Unlocking the ChangeLog file"
        rm -f ${LOCKFILE}
    fi
fi

# Publish changes
if [ $rc -eq 0 ] ; then
    if [ -n "$CVMFSPUBLISH" -a -s $TRANSACTION ] ; then
        $CVMFSPUBLISH
        if [ -n "$MAILTO" ] ; then
            echo "Sending notification"
            mail -s "[ATLAS CVMFS UPDATE] `hostname`" $MAILTO <<EOD
Dear admin,
the following releases have been installed in CVMFS @ `hostname`

`cat $TRANSACTION`

Number of files transferred: `cat ${TRANSACTION}.*.flist | wc -l`

Regards,

     Your faithful installation agent
EOD
        fi
    fi
else
    [ -n "$CVMFSABORT" ] && $CVMFSABORT
    if [ -n "$MAILTOALARM" ] ; then
        echo "Sending notification"
        mail -s "[ATLAS CVMFS ERROR] `hostname`" $MAILTOALARM <<EOD
Dear admin,
the GroupData failed to install in CVMFS.
Regards,

     Your faithful installation agent

--- Log extract begin ---
`cat ${TRANSACTION}.*.err`
--- Log extract end ---
EOD
    fi
fi

if [ -s $TRANSACTION ] ; then
    # Cleanup
    rm -f ${TRANSACTION}*
fi

# Clear the install lock
$HOME/bin/unlock-install

exit $rc
