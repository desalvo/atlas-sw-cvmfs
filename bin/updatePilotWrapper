#!/bin/sh

[ -z "$1" ] && USERNAME="atlcvmfs"

# Configuration scripts
[ -f "$PWD/.arelinstrc" ] && INSTCONF="$PWD/.arelinstrc"
[ -f "$HOME/.arelinstrc" ] && INSTCONF="$HOME/.arelinstrc"

DEST="/cvmfs/atlas.cern.ch/repo/sw/PandaPilotWrapper"
if [ -s "$INSTCONF" ] ; then
    DEST="`grep -i ^PandaPilotWrapperPath= $INSTCONF | cut -d= -f 2`"
    CHANGELOG="`grep -i ^ChangeLog= $INSTCONF | cut -d= -f 2`"
    USERNAME="`grep -i ^UserName= $INSTCONF | cut -d= -f 2`"
    SVNUSERNAME="`grep -i ^SvnUserName= $INSTCONF | cut -d= -f 2`"
    CVMFSTRANSACTION="`grep -i ^cvmfs_transaction= $INSTCONF | cut -d= -f 2`"
    CVMFSABORT="`grep -i ^cvmfs_abort= $INSTCONF | cut -d= -f 2`"
    CVMFSPUBLISH="`grep -i ^cvmfs_publish= $INSTCONF | cut -d= -f 2`"
    MAILTO="`grep -i ^MailTo= $INSTCONF | cut -d= -f 2`"
fi

TRANSACTION=/tmp/tmp.transaction.$$
TMPTAGS=/tmp/tmp.tags.$$
CURRDIR="$PWD"

# Wait for the main lock
$HOME/bin/lock-install updatePilotWrapper
rc=$?
if [ $rc -ne 0 ]; then
  exit $rc
fi

$CVMFSTRANSACTION
rm -f $TRANSACTION
rc=0

TSTAMP="`date +%Y%m%d%H%M`"
PWSRCS="github.com/PanDAWMS/pilot-wrapper::$DEST/latest github.com/PanDAWMS/pilot-wrapper:next:$DEST/testing"
for PWSRCLINE in $PWSRCS; do
    currrc=0
    PWSRC="https://`echo $PWSRCLINE | cut -d: -f 1`"
    PWBRANCH="`echo $PWSRCLINE | cut -d: -f 2`"
    PWDST="`echo $PWSRCLINE | cut -d: -f 3`"
    [ -n "$PWBRANCH" ] && PWBRANCH_OPT="-b $PWBRANCH" || PWBRANCH_OPT=""
    echo "Syncing pilot-wrapper from $PWSRC to $PWDST"
    if [ ! -d $PWDST ] ; then
        [ ! -d `dirname $PWDST` ] && mkdir -p `dirname $PWDST`
        git clone $PWBRANCH_OPT $PWSRC $PWDST
        currrc=$?
        [ $currrc -eq 0 ] && touch ${PWDST}/.cvmfscatalog
    else
        cd $PWDST
        git fetch
        HEADREV=$(git rev-parse HEAD)
        LOCALREV=$(git rev-parse @{u})
        if [ $HEADREV != $LOCALREV ]; then
            git pull
            currrc=$?
        else
            currrc=10
        fi
    fi
    if [ $currrc -eq 0 ] ; then
        echo "	* + PandaPilotWrapper `basename $PWDST` $TSTAMP" >> $TRANSACTION
    fi
    [ $currrc != 10 ] && let rc=$rc+$currrc
done

rm -f ${TRANSACTION}.*

cd $CURRDIR

# Automatic Changelog
if [ -n "$CHANGELOG" -a -s "$TRANSACTION" ] ; then
    LOCKFILE=${CHANGELOG}.lock
    set -o noclobber
    echo "Locking the ChangeLog file"
    lock_retries=0
    max_lock_retries=360
    lock_retry_sleep=10
    while [ $lock_retries -lt $max_lock_retries ] ; do
        echo "ChangeLog lock" 2> /dev/null > ${LOCKFILE}
        lsr=$?
        if [ $lsr -ne 0 ] ; then
            echo "Cannot lock the ChangeLog file, waiting ${lock_retry_sleep}s"
            let lock_retries=$lock_retries+1
            sleep ${lock_retry_sleep}s
        else
            break
        fi
    done
    set +o noclobber
    if [ $lsr -ne 0 ] ; then
        echo "Cannot lock the tags file after $lock_retries retries"
    else
        if [ -f ${CHANGELOG} ] ; then
            mv ${CHANGELOG} ${CHANGELOG}.save
        else
            touch ${CHANGELOG}.save
        fi
        [ -s ${CHANGELOG}.save ] && echo >> $TRANSACTION
        echo "`date +'%Y-%m-%d %H:%M:%S'` $USERNAME" > ${CHANGELOG}.head
        cat ${CHANGELOG}.head $TRANSACTION ${CHANGELOG}.save > ${CHANGELOG}
        if [ $? -eq 0 ] ; then
            rm -f ${CHANGELOG}.head ${CHANGELOG}.save
            echo "Updating ChangeLog $CHANGELOG successful"
        else
            echo "Error writing the ChangeLog, restoring the old copy"
            rm -f ${CHANGELOG}
            mv ${CHANGELOG}.save ${CHANGELOG}
        fi
        echo "Unlocking the ChangeLog file"
        rm -f ${LOCKFILE}
    fi
fi

# Publish changes
if [ $rc -eq 0 ] ; then
    if [ -n "$CVMFSPUBLISH" -a -s $TRANSACTION ] ; then
        $CVMFSPUBLISH
        if [ -n "$MAILTO" ] ; then
            mail -s "[ATLAS CVMFS UPDATE] `hostname`" "$MAILTO" <<EOD
Dear admin,
the following releases have been installed in CVMFS @ `hostname`

`cat $TRANSACTION`

Regards,

     Your faithful installation agent
EOD
        fi
    else
        [ -n "$CVMFSABORT" ] && $CVMFSABORT
    fi
else
    [ -n "$CVMFSABORT" ] && $CVMFSABORT
fi

# Cleanup
rm -f $TRANSACTION

# Clear the install lock
$HOME/bin/unlock-install

exit $rc
