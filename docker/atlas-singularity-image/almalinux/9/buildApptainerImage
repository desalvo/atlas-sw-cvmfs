#!/bin/sh

VERSION="`basename $0` v1.0 - 20220321"
help() {
    cat <<EOD
Usage: `basename $0` [OPTION]
   OPTIONS
   -------
   --link|-l <image-link>             Image link
   --name|-n <image-name>             Image name
   --help|-h                          Display this help
   --docker-image|-D <name>           Docker image name
                                      default: atlasadc/atlas-grid-<image-name>
   --nolink|-N                        Do not create image and fs symlinks
   --out|-o <path>                    Out base dir
                                      current: $OUTBASEDIR
   --pkg|-p <file>                    Package file name
   --trial|-t                         Trial run

$VERSION
Alessandro De Salvo <Alessandro.DeSalvo@roma1.infn.it>
EOD
}

# Defaults
OUTBASEDIR="/root/containers"
ARCH="`uname -m`"
DATE="`date +%Y%m%d%H%M`"

OPTS=`getopt -o D:hl:n:No:p:t -l docker-image:,help,link:,name:,nolink,out:,pkg:,trial -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..."; exit -1 ; fi
eval set -- "$OPTS"

while true ; do
    case "$1" in
        --docker-image|-D)     DOCKER_IMAGE="$2";shift 2;;
        --link|-l)             IMAGE_LINK="$2";shift 2;;
        --name|-n)             IMAGE_NAME="$2";shift 2;;
        --nolink|-N)           NOLINK="y";shift;;
        --out|-o)              OUTBASEDIR="$2";shift 2;;
        --pkg|-p)              PKGNAME="$2";shift 2;;
        --trial|-t)            TRIAL="y";shift;;
        --help|-h)             help;exit;;
        --)                    shift;break;;
        \?)                    break;
        exit;;
    esac
done

if [ -z "$IMAGE_NAME" ] ; then
  echo "No image name supplied, please specify --name <image-name>"
  exit 1
fi

[ -z "$PKGNAME" ] && PKGNAME="/root/packages/${ARCH}-${IMAGE_NAME}-${DATE}.tar.gz"
[ -z "$DOCKER_IMAGE" ] && DOCKER_IMAGE="atlasadc/atlas-grid-${IMAGE_NAME}"
[ -z "$IMAGE_LINK" ] && IMAGE_LINK="${ARCH}-${IMAGE_NAME}"
TS="`date --utc +%Y%m%d%H%M%S`"
OUTIMG="${IMAGE_NAME}-${TS}"
TMPDIR=/tmp
BASEIMGDIR="$HOME/apptainer/base"
OUTDIR="$OUTBASEDIR/images/apptainer/${ARCH}"
EXPORTDIR="$OUTBASEDIR/export/apptainer"
FSDIR="$OUTBASEDIR/fs/apptainer/${ARCH}"
IMGLINKDIR="$OUTBASEDIR/images/apptainer"
FSLINKDIR="$OUTBASEDIR/fs/apptainer"
TOPDIR=$PWD
export APPTAINER_CACHEDIR=/tmp/apptainer.$$
[ ! -d "$APPTAINER_CACHEDIR" ] && mkdir -p $APPTAINER_CACHEDIR

if [ -n "$TRIAL" ] ; then
  echo "Docker image: $DOCKER_IMAGE"
  echo "Timestamp: $TS"
  echo "Image name: $IMAGE_NAME"
  echo "Image link: $IMAGE_LINK"
  exit
fi

rc=0
echo "Building image from docker://${DOCKER_IMAGE}"
echo "apptainer build --fix-perms --sandbox ${TMPDIR}/${OUTIMG}.img.0 docker://${DOCKER_IMAGE}"
APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer build --fix-perms --sandbox ${TMPDIR}/${OUTIMG}.img.0 docker://${DOCKER_IMAGE}
cmdrc=$?
if [ -d ${TMPDIR}/${OUTIMG}.img.0 ] ; then
  chown -R cvatlas.cvatlas ${TMPDIR}/${OUTIMG}.img.0
  find ${TMPDIR}/${OUTIMG}.img.0 -type d -exec chmod u+w {} \;
fi
if [ $cmdrc -eq 0 ] ; then
  echo "Stripping image"
  APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer exec --writable -C ${TMPDIR}/${OUTIMG}.img.0 rm -fr /var/lib/yum /var/cache/yum /usr/share/doc /boot
  echo "Adding timestamp"
  APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer exec --writable -C ${TMPDIR}/${OUTIMG}.img.0 /bin/sh -c "echo $TS > /apptainer-creation-date" 
  APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer exec --writable -C ${TMPDIR}/${OUTIMG}.img.0 /bin/sh -c 'echo "export CDATE_APPTAINER=\"`cat /apptainer-creation-date`\"" >> /etc/profile.d/container-date.sh'
  APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer exec --writable -C ${TMPDIR}/${OUTIMG}.img.0 /bin/sh -c 'echo "setenv CDATE_APPTAINER \"`cat /apptainer-creation-date`\"" >> /etc/profile.d/container-date.csh'
  if [ $? -eq 0 ] ; then
    echo "Converting image ${TMPDIR}/${OUTIMG}.img.0 to ${TMPDIR}/${OUTIMG}.img"
    APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer build --fix-perms ${TMPDIR}/${OUTIMG}.img ${TMPDIR}/${OUTIMG}.img.0
    cmdrc=$?
    [ -f ${TMPDIR}/${OUTIMG}.img ] && chown cvatlas.cvatlas ${TMPDIR}/${OUTIMG}.img
    if [ $cmdrc -eq 0 ] ; then
      echo "Calculating checksum on ${TMPDIR}/${OUTIMG}.img"
      SHASUM="`sha256sum ${TMPDIR}/${OUTIMG}.img | awk '{print $1}'`"
      echo "Image ${TMPDIR}/${OUTIMG}-${SHASUM}.img ready"
      mv ${TMPDIR}/${OUTIMG}.img ${TMPDIR}/${OUTIMG}-${SHASUM}.img
      echo "Converting image to FS"
      APPTAINER_CACHEDIR=$APPTAINER_CACHEDIR apptainer build --fix-perms --sandbox ${TMPDIR}/${OUTIMG}-${SHASUM}/ ${TMPDIR}/${OUTIMG}-${SHASUM}.img
      cmdrc=$?
      [ -d ${TMPDIR}/${OUTIMG}-${SHASUM} ] && chown -R cvatlas.cvatlas ${TMPDIR}/${OUTIMG}-${SHASUM}
      if [ $cmdrc -eq 0 ] ; then
        echo "Fixing permissions"
        find ${TMPDIR}/${OUTIMG}-${SHASUM} -type d -exec chmod u+w {} \;
        find ${TMPDIR}/${OUTIMG}-${SHASUM}/usr/bin -type f -exec chmod u+rw {} \;
        find ${TMPDIR}/${OUTIMG}-${SHASUM}/usr/libexec -type f -exec chmod u+rw {} \;
        chmod u+rw ${TMPDIR}/${OUTIMG}-${SHASUM}/etc/*shadow*
        rm -fr ${TMPDIR}/${OUTIMG}-${SHASUM}/var/lib/yum
        find ${TMPDIR}/${OUTIMG}-${SHASUM}/ ! -perm -o+r -exec rm -fr {} \; 2>/dev/null
        # Fixing hardlinks
        echo "Fixing hardlinks"
        cd  ${TMPDIR}/${OUTIMG}-${SHASUM}
        declare -a inodes
        find "$PWD" -type f -links +1 -printf "%i %p\n" | sort -rn | \
        while read inode file; do
          if [ -z "${inodes[$inode]}" ] ; then
            inodes[$inode]="$file"
          else
            rm -f $file
            cp -f "${inodes[$inode]}" "$file"
          fi
        done
        cd $TOPDIR
        find ${TMPDIR}/${OUTIMG}-${SHASUM} -name '.wh.*' -exec rm -fr {} \;
      else
        rc=3
      fi
    else
      rc=2
    fi
  else
    rc=1
  fi


  if [ $rc -eq 0 -a -z "$TRIAL" ] ; then
    [ ! -d $OUTDIR ] && mkdir -p $OUTDIR
    echo "Moving image ${TMPDIR}/${OUTIMG}-${SHASUM}.img to ${OUTDIR}/${OUTIMG}-${SHASUM}.img"
    mv ${TMPDIR}/${OUTIMG}-${SHASUM}.img ${OUTDIR}/${OUTIMG}-${SHASUM}.img
    chmod 755 ${OUTDIR}/${OUTIMG}-${SHASUM}.img
    echo "Moving fs from ${TMPDIR}/${OUTIMG}-${SHASUM} to ${FSDIR}/${OUTIMG}-${SHASUM}"
    [ ! -d ${FSDIR} ] && mkdir -p ${FSDIR}
    mv ${TMPDIR}/${OUTIMG}-${SHASUM} ${FSDIR}
    if [ -z "$NOLINK" ] ; then
      echo "Linking ${FSLINKDIR}/${IMAGE_LINK} to ${ARCH}/${OUTIMG}-${SHASUM}"
      rm -f ${FSLINKDIR}/${IMAGE_LINK}
      ln -sf ${ARCH}/${OUTIMG}-${SHASUM} ${FSLINKDIR}/${IMAGE_LINK}
      echo "Linking ${IMGLINKDIR}/${IMAGE_LINK}.img to ${ARCH}/${OUTIMG}-${SHASUM}.img"
      rm -f ${IMGLINKDIR}/${IMAGE_LINK}.img
      ln -sf ${ARCH}/${OUTIMG}-${SHASUM}.img ${IMGLINKDIR}/${IMAGE_LINK}.img
    fi
    cd ${OUTBASEDIR}
    [ ! -d "`dirname ${PKGNAME}`" ] && mkdir -p "`dirname ${PKGNAME}`"
    echo "Changing the full tree ownership"
    chown -R cvatlas.cvatlas .
    echo "Creating package ${PKGNAME}"
    tar cfz ${PKGNAME} images/apptainer/${IMAGE_LINK}.img images/apptainer/${ARCH}/${OUTIMG}-${SHASUM}.img fs/apptainer/${IMAGE_LINK} fs/apptainer/${ARCH}/${OUTIMG}-${SHASUM}
    if [ $? -eq 0 ] ; then
      echo "Package successfully created as ${PKGNAME}"
    else
      echo "Failed"
    fi
  fi
fi

# Cleanup temporary files
echo "Cleaning up temporary files"
if [ -z "$TRIAL" ] ; then
  rm -fr ${TMPDIR}/${OUTIMG}.img.0 ${TMPDIR}/${OUTIMG}.img ${TMPDIR}/${OUTIMG}-${SHASUM}.img
  [ -d $APPTAINER_CACHEDIR ] && rm -fr $APPTAINER_CACHEDIR
fi
echo "done"
exit
